package cn.com.amber.events;import lombok.Setter;import lombok.extern.slf4j.Slf4j;import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;import org.apache.rocketmq.client.exception.MQClientException;import org.apache.rocketmq.common.message.MessageExt;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;import java.util.ArrayList;import java.util.List;/** * Consumer * * @author yangying * @version 1.0 * @since 2022/9/18 **/@Slf4j@Componentpublic abstract class AbstractConsumer {    @Setter    @Value("${rocketmq.namesrvAddress}")    protected String nameSrvAddress;    @Setter    @Value("${rocketmq.topic}")    protected String topic;    @Setter    @Value("${rocketmq.consumer.group}")    protected String consumerGroup;    private DefaultMQPushConsumer consumer ;    protected EventSerializer serializer = new GsonBasedEventSerializer();    /*public AbstractConsumer(String nameSrvAddress, String topic, String consumerGroup) {        this.nameSrvAddress = nameSrvAddress;        this.topic = topic;        this.consumerGroup = consumerGroup;    }*/    @PostConstruct    public void init(){        log.info("启动消息消费者,nameSrvAddress:{},topic:{},group:{}",nameSrvAddress,topic,consumerGroup);        consumer = new DefaultMQPushConsumer(consumerGroup);        consumer.setConsumerGroup(consumerGroup);        consumer.setNamesrvAddr(nameSrvAddress);        try {            consumer.subscribe(topic,"*");        } catch (MQClientException e) {            throw new RuntimeException(e);        }        consumer.registerMessageListener(new MessageListenerConcurrently() {            @Override            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {                log.info("receive message num:{}",msgs.size());                List<String> events = new ArrayList<>();                for(MessageExt msg :msgs){                    log.info("receive message id:{},body:{}",msg.getMsgId(),new String(msg.getBody()));                    String event = new String(msg.getBody());                    events.add(event);                }                return consume(events);            }        });        try {            consumer.start();        } catch (MQClientException e) {            log.error("启动消息消费者失败,{}",e.getErrorMessage(),e);            throw new RuntimeException(e);        }        log.info("启动消息消费者成功");    }    public abstract ConsumeConcurrentlyStatus  consume(List<String> messages);    public void shutdown(){        consumer.shutdown();    }}