package cn.com.amber.events;import lombok.Setter;import lombok.extern.slf4j.Slf4j;import org.apache.rocketmq.client.exception.MQBrokerException;import org.apache.rocketmq.client.exception.MQClientException;import org.apache.rocketmq.client.producer.DefaultMQProducer;import org.apache.rocketmq.client.producer.SendResult;import org.apache.rocketmq.common.message.Message;import org.apache.rocketmq.remoting.exception.RemotingException;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import javax.annotation.PostConstruct;/** * 事件生产者 * * @author yangying * @version 1.0 * @since 2022/9/18 **/@Component@Slf4jpublic class Producer {    @Setter    @Value("${rocketmq.namesrvAddress}")    private String nameSrvAddress;    @Setter    @Value("${rocketmq.topic}")    private String topic;    @Setter    @Value("${rocketmq.producer.group}")    private String producerGroup;    protected EventSerializer serializer = new GsonBasedEventSerializer();    private DefaultMQProducer defaultMQProducer;    /*public Producer(String nameSrvAddress, String topic, String producerGroup) {        this.nameSrvAddress = nameSrvAddress;        this.topic = topic;        this.producerGroup = producerGroup;    }*/    @PostConstruct    public void init() {        log.info("启动消息生产者,nameSrvAddress:{},topic:{},group:{}",nameSrvAddress,topic,producerGroup);        defaultMQProducer = new DefaultMQProducer(producerGroup);        defaultMQProducer.setNamesrvAddr(nameSrvAddress);        try {            defaultMQProducer.start();        } catch (MQClientException e) {            log.error("启动消息生产者失败:{}",e.getErrorMessage(),e);            throw new RuntimeException(e);        }        log.info("启动消息生产者,nameSrvAddress:{},topic:{},group:{}",nameSrvAddress,topic,producerGroup);    }    public void send(Event event) {        send(event, "*");    }    public void send(Event event, String tags) {        String json = serializer.serialize(event);        log.info("请求消息原文:{}",json);        Message message = new Message(topic, tags,json.getBytes());        message.setKeys(event.getKey());        try {            SendResult sendResult = defaultMQProducer.send(message);            System.out.println("消息发送结果："+sendResult.getMsgId());        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {            throw new RuntimeException(e);        }    }    public void shutdown() {        defaultMQProducer.shutdown();    }}