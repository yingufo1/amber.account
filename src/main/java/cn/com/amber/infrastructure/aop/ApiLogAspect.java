package cn.com.amber.infrastructure.aop;import cn.com.amber.commons.untils.StringUtil;import cn.com.amber.infrastructure.annotation.ApiLog;import cn.com.amber.infrastructure.api.BaseReq;import cn.com.amber.infrastructure.api.Response;import cn.com.amber.infrastructure.api.enums.ResponseCode;import cn.com.amber.infrastructure.exception.BusinessException;import com.alibaba.fastjson2.JSONObject;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.Signature;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;import org.springframework.util.StopWatch;/** * API日志切面 * * @author yangying * @version 1.0 * @since 2022/9/25 **/@Slf4j@Aspect@Order(1)@Componentpublic class ApiLogAspect {    @Pointcut("@annotation(cn.com.amber.infrastructure.annotation.ApiLog)&&@annotation(apiLog)")    private void apiLogPointcut(ApiLog apiLog) {    }    @Around("apiLogPointcut(apiLog)")    public Object around(ProceedingJoinPoint proceedingJoinPoint,ApiLog apiLog) throws Throwable {        if(!ApiLog.API_STRAND.equals(apiLog.value())){//非规范接口           return proceedingNonStrand(proceedingJoinPoint);        }        Object[] args = proceedingJoinPoint.getArgs();        if (args.length != 1 || !BaseReq.class.isAssignableFrom(args[0].getClass())) {            return Response.FAIL_WITH_MESSAGE(ResponseCode.ILLEGAL_ARGUMENT, "参数个数错误或非标准格式，请检查");        }        String reqId = ((BaseReq) args[0]).getReqId();        if (StringUtil.isBlankString(reqId)) {            return Response.FAIL(ResponseCode.ILLEGAL_ARGUMENT, "reqId");        }        StopWatch stopWatch = new StopWatch();        logConvertToJsonInfo(args[0],"收到请求,{}","收到请求,转换请求报文失败");        stopWatch.start();        Response response = proceed(proceedingJoinPoint,reqId);        stopWatch.stop();        logConvertToJsonInfo(response,"处理完成,耗时：{}ms,返回结果:{}","处理完成,耗时：{}，转换响应报文失败",                stopWatch.getTotalTimeMillis());        return response;    }    private Object proceedingNonStrand(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {        Signature methodSignature = proceedingJoinPoint.getSignature();        String methodName = methodSignature.getDeclaringTypeName()+"."+methodSignature.getName();        log.warn("非标准的API接口规范,请及时修改。接口:{}",methodName);        log.info("请求方法:{}",methodName);        StopWatch stopWatch = new StopWatch();        stopWatch.start();        Object revVal =  proceedingJoinPoint.proceed();        stopWatch.stop();        log.info("处理完成,耗时:{}ms",stopWatch.getTotalTimeMillis());        return revVal;    }    /**     * 把请求对象o转换为json对象，并打印。注意，转换o后的json对象，总是放在最后一个参数打印，也就是会放在可变参数args之后。     * @param o     * @param whenConverted     * @param whenConvertFail     * @param arg     */    private void logConvertToJsonInfo(Object o, String whenConverted, String whenConvertFail, Object... arg){        try {            String info = JSONObject.toJSONString(o);            if(arg.length>0){                log.info(whenConverted, arg,info);            }else{                log.info(whenConverted,info);            }        }catch (Exception e){            log.error(whenConvertFail);        }    }    private Response proceed(ProceedingJoinPoint proceedingJoinPoint,String reqId){        Response response = null;        try {            Object resp = proceedingJoinPoint.proceed();            if(resp instanceof Response){                response = (Response) resp;            }else{                throw new RuntimeException("错误的响应返回对象，请检查方法签名");            }        } catch (BusinessException be) {            log.info("业务处理失败,{}", be.getMessage());            response = Response.FAIL_WITH_MESSAGE(be.getResponseCode(),be.getMessage());        } catch (Throwable e) {            log.error("系统异常,{}",e.getMessage(),e);            response = Response.SYSTEM_ERROR();        }        response.setReqId(reqId);        return response;    }}