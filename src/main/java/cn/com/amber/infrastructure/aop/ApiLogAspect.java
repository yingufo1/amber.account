package cn.com.amber.infrastructure.aop;import cn.com.amber.infrastructure.annotation.ApiLog;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.slf4j.MDC;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;import java.util.UUID;/** * API日志切面 * * @author yangying * @version 1.0 * @since 2022/9/25 **/@Slf4j@Aspect@Order(1)@Componentpublic class ApiLogAspect {    private final static ApiLogHandler SIMPLE = new SimpleApiLogHandler();    private final static ApiLogHandler STANDARD = new StandardApiLogHandler();    private final static ApiLogHandler RESTFUL = new RestfulApiLogHandler();    private final static String TRACE_MDC = "T";    @Pointcut("@annotation(cn.com.amber.infrastructure.annotation.ApiLog)&&@annotation(apiLog)")    private void apiLogPointcut(ApiLog apiLog) {    }    @Around("apiLogPointcut(apiLog)")    public Object around(ProceedingJoinPoint proceedingJoinPoint,ApiLog apiLog) throws Throwable {        ApiLogHandler apiLogHandler = getApiLogHandler(apiLog);        MDC.put(TRACE_MDC, UUID.randomUUID().toString());        Object retVal = null;        try {            retVal = apiLogHandler.proceed(proceedingJoinPoint);        } finally {            MDC.clear();        }        return retVal;    }    private ApiLogHandler getApiLogHandler(ApiLog apiLog){        if(ApiLog.API_SIMPLE.equals(apiLog.value())){//非规范接口            return SIMPLE;        }else if(ApiLog.API_STANDARD.equals(apiLog.value())){            return STANDARD;        }else if(ApiLog.API_RESTFUL.equals(apiLog.value())){            return RESTFUL;        }else{            throw new RuntimeException("Not support ApiLog type");        }    }}