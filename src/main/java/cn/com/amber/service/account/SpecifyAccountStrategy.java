package cn.com.amber.service.account;import cn.com.amber.commons.untils.RandomUtil;import cn.com.amber.entity.Account;import cn.com.amber.entity.enums.AccountStatusEnum;import cn.com.amber.entity.enums.AccountTypeEnum;import cn.com.amber.entity.enums.LegalPersonType;import cn.com.amber.infrastructure.api.enums.ResponseCode;import cn.com.amber.infrastructure.exception.BusinessException;import cn.com.amber.mapper.AccountMapper;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import javax.annotation.Resource;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;/** * 指定科目下开户 * * @author yangying * @version 1.0 * @since 2022/9/29 **/@Slf4j@Componentpublic class SpecifyAccountStrategy implements OpenAccountStrategy {    @Resource    private AccountMapper accountMapper;    @Override    public List<Account> openAccount(OpenAccountContext context) {        //查找总账户        Account parent = accountMapper.selectByAccountNo("0", context.getAccountNo());        if (parent == null || parent.getType() != AccountTypeEnum.SUMMARY.getCode()) {            log.info("未查找到待开户账户或待开户账户不是总账户，{},{}", context.getAccountNo(), parent == null ? "" : parent.getType());            throw BusinessException.create(ResponseCode.ACCOUNT_NOT_FOUND, context.getAccountNo());        }        LegalPersonType legalPersonType = LegalPersonType.getValue(context.getLegalPersonType());        String openUserId = resolveOpenUserId(legalPersonType, context);        checkIfRepeat(openUserId,parent.getId());        //账户下构建子账户        Account account = doOpenAccount(parent,context,openUserId);        List<Account> accounts = new ArrayList<>();        accounts.add(account);        return accounts;    }    private String resolveOpenUserId(LegalPersonType legalPersonType, OpenAccountContext context) {        return legalPersonType == LegalPersonType.INDIVIDUAL ? context.getUserId() :                context.getLegalPersonId();    }    private void checkIfRepeat(String openUserId,Long parentId) {        List<Account> accounts = accountMapper.selectDetailAccountByLegalPersonIdAndParentId(openUserId,parentId);        if (!CollectionUtils.isEmpty(accounts)) {            throw BusinessException.create(ResponseCode.OPEN_ACCOUNT_FAIL_REPEAT_ID, openUserId,parentId);        }    }    private Account doOpenAccount(Account parent,OpenAccountContext context,String openUserId){        Account account = new Account();        account.setAccountNo(parent.getAccountNo() + context.getLegalPersonType() + context.getAccountType() + RandomUtil.getRandomNum(4, 10000));        account.setAccountName(context.getName() + "-" + parent.getAccountName());        account.setLegalPersonType(context.getLegalPersonType());        account.setLegalPersonId(openUserId);        account.setDirection(parent.getDirection());        account.setBalance(BigDecimal.ZERO);        account.setAvailableBalance(BigDecimal.ZERO);        account.setLevel(parent.getLevel() + 1);        account.setParentId(parent.getId());        account.setType(context.getAccountType());        account.setStatus(AccountStatusEnum.IN_USE.getCode());        //插入        accountMapper.insert(account);        return account;    }}