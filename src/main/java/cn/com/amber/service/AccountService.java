package cn.com.amber.service;import cn.com.amber.api.dto.req.OpenAccountReq;import cn.com.amber.commons.untils.RandomUtil;import cn.com.amber.entity.Account;import cn.com.amber.entity.Subject;import cn.com.amber.entity.enums.AccountStatusEnum;import cn.com.amber.entity.enums.AccountTypeEnum;import cn.com.amber.entity.enums.LegalPersonType;import cn.com.amber.mapper.AccountMapper;import cn.com.amber.service.account.OpenAccountContext;import cn.com.amber.service.account.OpenAccountStrategy;import cn.com.amber.service.account.RuleBasedStrategy;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.math.BigDecimal;import java.util.List;/** * 账户服务 * * @author yangying * @version 1.0 * @since 2022/9/21 **/@Servicepublic class AccountService {    @Resource    private AccountMapper accountMapper;    @Resource    private SubjectService subjectService;    @Resource    private OpenAccountStrategy ruleBasedStrategy;    @Resource    private OpenAccountStrategy specifyAccountStrategy;    /**     * 开户     *     * @param openAccountReq 开户请求     * @return 账户号     */    @Transactional    public List<Account> open(OpenAccountReq openAccountReq) {        OpenAccountContext context =                OpenAccountContext.builder().accountNo(openAccountReq.getAccountNo()).name(openAccountReq.getName())                        .strategy(openAccountReq.getOpenAccountStrategy()).legalPersonId(openAccountReq.getLegalPersonId())                        .userId(openAccountReq.getUserId()).legalPersonType(openAccountReq.getType()).build();        if (context.getStrategy() == OpenAccountContext.STRATEGY_RULE_BASED) {            return ruleBasedStrategy.openAccount(context);        } else {            return specifyAccountStrategy.openAccount(context);        }    }    /**     * 只作为工具类初始化总账户，不能将能力提供给外部     *     * @param subjectNos 一级科目号     */    public void initSummaryAccount(List<String> subjectNos) {        //初始化非本机构的总账户        initNonSelfSummaryAccount(subjectNos);        //刷新账户开通规则        ((RuleBasedStrategy)ruleBasedStrategy).configRules();        //初始化本机构总账户        initSelfSummaryAccount();    }    private void initNonSelfSummaryAccount(List<String> subjectNos){        List<Subject> subjects = subjectService.querySubjects(subjectNos);        String seq = RandomUtil.getRandomNum(6, 100000);        for (Subject subject : subjects) {            Account account = new Account();            account.setAccountNo(generateAccountNo(subject.getSubjectNo() , subject.getLevel() ,                    AccountTypeEnum.SUMMARY.getCode(), seq));            account.setDirection(subject.getDirection());            account.setLevel(subject.getLevel());            account.setAccountName(subject.getSubjectName());            account.setStatus(AccountStatusEnum.IN_USE.getCode());            account.setLegalPersonId("0");            account.setBalance(BigDecimal.ZERO);            account.setAvailableBalance(BigDecimal.ZERO);            account.setType(AccountTypeEnum.SUMMARY.getCode());            accountMapper.insert(account);            seq = String.format("%06d", Integer.parseInt(seq) + 1);        }    }    private void initSelfSummaryAccount(){        OpenAccountContext openAccountContext = OpenAccountContext.builder().legalPersonId("100000000").name("amber-self")                .accountType(AccountTypeEnum.SUMMARY.getCode()).legalPersonType(LegalPersonType.SELF.getCode())                .strategy(OpenAccountContext.STRATEGY_RULE_BASED).build();        ruleBasedStrategy.openAccount(openAccountContext);    }    private String generateAccountNo(String subjectNo,int level,int type,String seq){        return subjectNo + level + type + seq;    }    /**     * 销户     *     * @param account     * @return     */    public void close(Account account) {    }    /**     * 冻结     *     * @param account     * @return     */    public void froze(Account account) {    }}