package cn.com.amber.configuration;import lombok.Getter;import lombok.Setter;import lombok.extern.java.Log;import lombok.extern.slf4j.Slf4j;import org.apache.shardingsphere.sharding.api.sharding.standard.PreciseShardingValue;import org.apache.shardingsphere.sharding.api.sharding.standard.RangeShardingValue;import org.apache.shardingsphere.sharding.api.sharding.standard.StandardShardingAlgorithm;import java.util.Collection;import java.util.Properties;/** * TODO:class description * * @author yangying * @version 1.0 * @since 2022/9/6 **/@Slf4jpublic class DBHashCodeShardingAlg implements StandardShardingAlgorithm<String> {    @Getter    @Setter    private Properties props;    private int dbCount;    private int tableCount;    @Override    public String doSharding(Collection<String> collection, PreciseShardingValue<String> preciseShardingValue) {        log.info("sharding colName:{}, value:{}",preciseShardingValue.getColumnName(),preciseShardingValue);        for(String dbName:collection){            int dbNum = preciseShardingValue.getValue().hashCode()%tableCount/dbCount;            if(dbName.endsWith(String.valueOf(dbNum))){                log.info("data source name:{}",dbName);                return dbName;            }        }        throw new RuntimeException("can not find db sharding,sharding col value:"+preciseShardingValue);    }    @Override    public Collection<String> doSharding(Collection<String> collection, RangeShardingValue<String> rangeShardingValue) {        return null;    }    @Override    public void init() {        dbCount = Integer.parseInt(props.getProperty("dbCount"));        tableCount =Integer.parseInt(props.getProperty("tableCount"));    }    @Override    public String getType() {        return "CLASS_BASED";    }}