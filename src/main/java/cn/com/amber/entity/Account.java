package cn.com.amber.entity;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import java.math.BigDecimal;import java.util.Date;/** * 账户实体 * * @author yangying * @version 1.0 * @since 2022/9/4 **/@Getter@Setter@NoArgsConstructorpublic class Account extends BaseEntity {    //id,唯一主键    private Long id;    //账户名    private String accountName;    //账户号，唯一    private String accountNo;    //账户级别    private int level;    //父账户id，通过id关联    private Long parentId;    //余额方向，C-贷记;D-借记    private String direction;    //状态，1-正常；2-冻结；3-销户    private int status;    //止入止出标记,11-可入可出；01-准入不准出；10-准出不准入;00-止入止出    private int forbiddenFlag;    //账户余额    private BigDecimal balance;    //可用余额    private BigDecimal availableBalance;    //冻结余额    private BigDecimal frozenBalance = BigDecimal.ZERO;    //账户法人类型，LegalPersonType    private int legalPersonType;    //法人id    private String legalPersonId;    //1-总账户；2-分账户    private int type;    public Account(Long id,String accountName,String accountNo,Integer level,Long parentId,String direction,                   Integer status,Integer forbiddenFlag,BigDecimal balance,BigDecimal availableBalance,                   BigDecimal frozenBalance,Integer legalPersonType,String legalPersonId,Integer type,String creator,                   Date gmtCreated,String modifier,Date gmtModified,String isDeleted){        super(gmtCreated,creator,gmtModified,modifier,isDeleted);        this.id = id;        this.accountName =accountName;        this.availableBalance =availableBalance;        this.accountNo = accountNo;        this.level = level;        this.parentId = parentId;        this.direction = direction;        this.status = status;        this.forbiddenFlag = forbiddenFlag;        this.balance = balance;        this.frozenBalance =frozenBalance;        this.legalPersonType = legalPersonType;        this.legalPersonId = legalPersonId;        this.type = type;    }    @Override    public int hashCode(){        int hash = 1;        final int prime = 37;        hash =  hash*prime + getAccountNo().hashCode();        hash =  hash*prime + getId().hashCode();        return hash;    }    @Override    public boolean equals(Object o){        if(o == this){            return true;        }        if( o == null || o.getClass() != getClass()){            return false;        }        Account obj = (Account) o;        if(obj.getAccountNo() == null || obj.getId() == null){            return false;        }        return obj.hashCode() == this.hashCode();    }}