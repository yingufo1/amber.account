package cn.com.amber.api;import cn.com.amber.api.dto.req.OpenAccountReq;import cn.com.amber.api.dto.response.AccountDTO;import cn.com.amber.commons.untils.StringUtil;import cn.com.amber.entity.Account;import cn.com.amber.entity.enums.LegalPersonType;import cn.com.amber.infrastructure.annotation.ApiLog;import cn.com.amber.infrastructure.api.Response;import cn.com.amber.infrastructure.api.enums.ResponseCode;import cn.com.amber.mapper.AccountMapper;import cn.com.amber.service.AccountService;import com.alibaba.fastjson2.JSONObject;import lombok.extern.slf4j.Slf4j;import org.redisson.api.RLock;import org.redisson.api.RedissonClient;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;/** * 账户管理 * * @author yangying * @version 1.0 * @since 2022/9/3 **/@Slf4j@RestController@RequestMapping(path = "/account")public class AccountManagerController {    @Resource    private AccountMapper accountMapper;    @Resource    private RedissonClient redissonClient;    @Resource    private AccountService accountService;    @RequestMapping(path = "/getUser/{userId}")    public String getUer(@PathVariable String userId) {        if (userId.equals("111")) {            return "john";        }        return "has not found";    }    @ApiLog(ApiLog.API_RESTFUL)    @RequestMapping(path = "/getAccount/{userId}/{accountNo}")    public String getAccount(@PathVariable String accountNo, @PathVariable String userId) {        if (StringUtil.isBlankString(accountNo)) {            return "get nothing";        }        Account account = accountMapper.selectByAccountNo(userId, accountNo);        return JSONObject.toJSONString(account);    }    @ApiLog    @RequestMapping(path = "/open", method = RequestMethod.POST)    public Response open(@Validated @RequestBody OpenAccountReq req) {        RLock lock = null;        boolean isIndividual = req.getType() == LegalPersonType.INDIVIDUAL.getCode();        String legalPersonId = isIndividual ? req.getUserId() : req.getLegalPersonId();        if(StringUtil.isBlankString(legalPersonId)){            return Response.FAIL(ResponseCode.ILLEGAL_ARGUMENT,isIndividual?"userId":                    "legalPersonId");        }        List<AccountDTO> accountDTOS = new ArrayList<>();        try {            lock = redissonClient.getLock(legalPersonId);            boolean isLock = lock.tryLock(100, 30 * 1000, TimeUnit.MILLISECONDS);            if(!isLock){                return Response.FAIL(ResponseCode.LOCK_FAIL,isIndividual ? "userId" :"legalPersonId",                        legalPersonId);            }            List<Account> accounts = accountService.open(req);            for(Account account:accounts){                AccountDTO accountDTO = AccountDTO.builder().accountNo(account.getAccountNo()).balance(account.getBalance())                        .balanceDirection(account.getDirection()).name(account.getAccountName()).build();                accountDTOS.add(accountDTO);            }        } catch (InterruptedException e) {            return Response.FAIL(ResponseCode.LOCK_FAIL,isIndividual ? "userId" :"legalPersonId",                    legalPersonId);        } finally {            if (lock != null && lock.isLocked() && lock.isHeldByCurrentThread()) {                lock.unlock();            }        }        return Response.SUCCESS(accountDTOS);    }}