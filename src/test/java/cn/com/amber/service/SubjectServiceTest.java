package cn.com.amber.service;import cn.com.amber.SpringContextBaseTest;import cn.com.amber.api.dto.req.QuerySubjectReq;import cn.com.amber.api.dto.response.SubjectDTO;import cn.com.amber.commons.json.GsonUtil;import cn.com.amber.entity.enums.AccountingElementEnum;import cn.com.amber.infrastructure.exception.BusinessException;import com.google.gson.reflect.TypeToken;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import javax.annotation.Resource;import java.util.List;import static org.hamcrest.CoreMatchers.equalTo;import static org.hamcrest.MatcherAssert.assertThat;/** * SubjectServiceTest * * @author yangying * @version 1.0 * @since 2022/9/28 **/@Slf4jpublic class SubjectServiceTest extends SpringContextBaseTest{    @Resource    private SubjectService subjectService  ;    @Test(expected = BusinessException.class)    public void whenUnKnowElementThenException(){        QuerySubjectReq querySubjectReq = new QuerySubjectReq();        querySubjectReq.setElement(0);        subjectService.querySubjectHierarchy(querySubjectReq);    }    @Test(expected = BusinessException.class)    public void whenSubjectNoIsNullAndElementNotProvided_ThenException(){        QuerySubjectReq querySubjectReq = new QuerySubjectReq();        subjectService.querySubjectHierarchy(querySubjectReq);    }    @Test    public void whenOnlyProvideElement_ThenReturnSubjcets(){        QuerySubjectReq querySubjectReq = new QuerySubjectReq();        querySubjectReq.setElement(AccountingElementEnum.ASSERT.getCode());        List<SubjectDTO> ret = subjectService.querySubjectHierarchy(querySubjectReq);        assertThat(ret.size(),equalTo(3));        String s = GsonUtil.serializing(ret,new TypeToken<List<SubjectDTO>>(){}.getType());        log.info(s);    }    @Test    public void whenOnlyProvideSbujectNo_ThenReturnSubjces(){        QuerySubjectReq querySubjectReq = new QuerySubjectReq();        querySubjectReq.setSubjectNo("111122D");        List<SubjectDTO> ret = subjectService.querySubjectHierarchy(querySubjectReq);        assertThat(ret.size(),equalTo(2));        String s = GsonUtil.serializing(ret,new TypeToken<List<SubjectDTO>>(){}.getType());        log.info(s);    }    @Test    public void whenQueryBySubjectAndElement_ThenReturnSubjces(){        QuerySubjectReq querySubjectReq = new QuerySubjectReq();        querySubjectReq.setSubjectNo("111122D");        querySubjectReq.setElement(AccountingElementEnum.ASSERT.getCode());        List<SubjectDTO> ret = subjectService.querySubjectHierarchy(querySubjectReq);        assertThat(ret.size(),equalTo(2));        String s = GsonUtil.serializing(ret,new TypeToken<List<SubjectDTO>>(){}.getType());        log.info(s);    }}